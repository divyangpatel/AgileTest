===================================================================
To make your current directory a Git repository we simply run init.
===================================================================
git init

=============================================================================
To make a new directory that is a Git repository we just specify a directory.
=============================================================================
git init newrepo.git

====================================
Add the directory in your repository
====================================
mv  directorypath repositorypath   [mv E:\projects\AgileInnovationToolkit\ShapeColorBridgePattern E:\projects\AgileInnovationToolkit\AgileInnovationToolkitGitRepository]
cp  directorypath repositorypath   [cp E:\projects\AgileInnovationToolkit\ShapeColorBridgePattern E:\projects\AgileInnovationToolkit\AgileInnovationToolkitGitRepository]

===================================================================================
So we have a repository, but nothing in it. You can add files with the add command.
===================================================================================
git add filename

================================
Commit the files and directories
================================

repository path>git commit [E:\projects\AgileInnovationToolkit\AgileInnovationToolkitRepository.git [master +3 ~0 -0 !]> git commit]

============================================================================================================================================
Now that we've added these files, we want them to actually be stored in the Git repository. We do this by committing them to the repository.
============================================================================================================================================
git commit -m "Adding files"

==================================================================================================
When you've made changes to some files, you can run git status to see what will happen on commit. 
==================================================================================================
git status

==========================================
for push your local repository into github
==========================================
e:/projects/reponame>git push origin master
 br
===========================================
for pull or checkout into your directory
===========================================
e:/projects/reponame>git pull  https://github.com/username/yourrepository.git [https://github.com/divyangpatel/AgileInnovationToolkitGitRepository.git]

============================================================================================
If you want to remove a file from the repository, removing it from future commits we use rm.
============================================================================================
git rm file

=========================================================================================
Branches are done locally and are fast. To create a new branch we use the branch command.
=========================================================================================
git branch branchname[git branch test]

================================================
To put your local branch into github in (remote)
================================================
git push origin branchname [git push origin test]

========================================================================================================================
the branch command does not move us into the branch, just create one. So we use the checkout command to change branches.
========================================================================================================================
git checkout branchname [git checkout test]

=====================================================
The first branch, or main branch, is called "master."
=====================================================
git checkout master

======================================================================================================================================================================================
While in your branch you can commit changes that will not be reflected in the master branch. When you're done, or want to push changes to master, switch back to master and use merge.
======================================================================================================================================================================================
git checkout master
git merge test

====================================================================================================
And if you're done with the branch you can delete with the local branch command and pass the -d flag.
====================================================================================================
git branch -D branchname[git branch -D test]

============================
For delete the remote branch
============================
git push origin --delete <branchName>[git push origin --delete test]

=======================================
To see all branches in local ane remote
=======================================
git branch -a

===========================
To see all branch in remote
===========================
git branch -r

===============================================================================================================
The former displays plenty of information about the remote in general and how it relates to your own repository
===============================================================================================================
git remote show origin

===============================================================================
what branches are on your remote by actually using the remote related commands
===============================================================================
git remote 
git ls-remote 

====================================================================================
anyone else has already deleted the branch. try to synchronize your branch list with
====================================================================================
git fetch -p 
The git manual says

 -p, --prune
           After fetching, remove any remote-tracking branches which no longer exist on the remote.

==========================
For deleting the Directory
==========================
git rm -r directoryname[git rm -r JSFProjectDirectory]

===============================================
For deleting the directory in remote repository
===============================================
git rm -r directoryname[git rm -r JSFProjectDirectory]
git commit -m  directoryname[git commit -m JSFProjectDirectory]
git push origin branchname[git push origin master]

=======================================================================================
You can quickly very previous states of the repository using the checkout command again.
=======================================================================================
git checkout HASH

==========================================================================================================================================================================================================
So running git commit will do nothing unless you explicitly add files to the commit with git add. If you're looking for the commit command to automatically commit local modifications we use the -a flag.
==========================================================================================================================================================================================================
git commit -a -m "Changed some files"

=============================================================================================
Or if you'd like to have only certain files, but still not run git add we pass specific files.
=============================================================================================
git commit -m "change some files" file1 file2

========================================================================================================
Publishing Your Repository
--------------------------
To put your repository on a server we'll start by making a "bare" repository, and upload it to a server.
========================================================================================================
cd /tmp
git clone --bare ~/your/repo/path project.git
scp -r project.git ssh://example.com/~/www/

===========================================================================
Now if we have a couple of commits and want to push it up to that location:
===========================================================================
git push ssh://example.com/~/www/project.git

=================================================================================================================
If you dislike typing the URI each time we can take advantage that a cloned project remembers where it came from.
=================================================================================================================
cd ..
git clone ssh://example.com/~/www/project.git project
Now git push will push to the URI it was cloned from. You can do this manually by editing .git/config in your repository.






